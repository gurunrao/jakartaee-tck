<!--

    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<project name="GlassFish Configuration for VI">

    <!-- IMPORTS -->
    <import file="./ts.common.props.xml" optional="true"/>
    <import file="../../../../../../bin/xml/ts.common.props.xml" optional="true"/>
    <import file="./s1as.xml" optional="true"/>
    <import file="../../../../../../bin/xml/impl/glassfish/s1as.xml" optional="true"/>

    <!--
      GlassFish configuration properties: See the ts.jte file
    -->

    <property name="server.start.delay.mins" value="5"/>

    <property name="cli.path"        value="${webcontainer.home}/bin/asadmin"/>

    <property name="password.file.template" value="${common.bin.dir}/xml/impl/glassfish/templates/password.template"/>
    <property name="password.file" value="${bin.dir}/password.txt"/>
        
     <target name="filter.password.file" depends="configPlatform">
       <copy file="${password.file.template}"
             tofile="${password.file}"
             overwrite="true">
        <filterset>
           <filter token="sjsas.master.password" value="${glassfish.master.pass}"/>
           <filter token="sjsas.admin.password" value="${glassfish.admin.pass}"/>
           <filter token="user.password" value="${userpassword}" />
         </filterset>
       </copy>
     </target>

    <target name="configPlatform"
           depends="checkPlatform, configUnix, configWindows">
    </target>

    <target name="checkPlatform" >
        <condition property ="isUnixPlatform">
           <os family="unix"/>
        </condition>
        <condition property ="isWindowsPlatform">
           <os family="windows"/>
        </condition>
        <condition property ="os" value="unix">
           <os family="unix"/>
        </condition>
        <condition property ="os" value="windows">
           <os family="windows"/>
        </condition>
	<condition property ="isMac">
	   <os family="mac"/>
	</condition>
    </target>

    <target name="config.vi" depends="configPlatform">
	<antcall target="stop-server"/>
	<antcall target="concat.security"/>
	<antcall target="copy.tck.jars"/>
	<antcall target="start-server"/>
	<antcall target="add.users"/>
    </target>

    <target name="clean.vi" depends="configPlatform">
	<antcall target="start-server"/>
	<antcall target="delete.tck.jars"/>
	<antcall target="drop.users"/>
	<antcall target="stop-server"/>
	<antcall target="start-server"/>
    </target>

    <target name="configUnix" depends="checkPlatform" if="isUnixPlatform" >
           <echo message="on unix"/>
           <property name="dir.sep" value="/"/>
           <property name="exec.asadmin" value="${cli.path}" />
           <property name="exec.asadmin.part2" value="" />
    </target>

    <target name="configWindows" depends="checkPlatform" if="isWindowsPlatform" >
           <echo message="on windows"/>
           <property name="dir.sep" value="\\"/>
           <property name="exec.asadmin" value="cmd.exe" />
           <property name="exec.asadmin.part2" value= " /c ${cli.path}" />
    </target>

    <!--
        Start The App Server by calling the appropriate target
        depending on whether we are on unix/linux or windows.
    -->
    <target name="start-server" depends="filter.password.file" >

       <antcall target="start.appserver.unix"/>
       <antcall target="start.appserver.win"/>
    </target>
    <!--
        Start The App Server on unix/linux
    -->
    <target name="start.appserver.unix" depends="configPlatform" if="isUnixPlatform">
      <exec executable="${exec.asadmin}" failifexecutionfails="false">
        <arg line="${exec.asadmin.part2}" />
        <arg line=" --user ${glassfish.admin.user}"/>
        <arg line=" --passwordfile ${password.file}"/>
        <arg line=" start-domain"/>
        <arg line=" ${glassfish.domain.name}"/>
      </exec>
      <echo message=" The App Server is now available." />
    </target>

    <!--
        Start the App Server on windoze
    -->
    <target name="start.appserver.win" depends="configPlatform" if="isWindowsPlatform">
      <spawn executable="${exec.asadmin}" failifexecutionfails="false">
        <arg line="${exec.asadmin.part2}" />
        <arg line=" --user ${glassfish.admin.user}"/>
        <arg line=" --passwordfile ${password.file}"/>
        <arg line=" start-domain"/>
        <arg line=" ${glassfish.domain.name}"/>
      </spawn>
      <echo message=" ...Waiting for server to be up ...(sleeping for ${server.start.delay.mins} minutes) " /> 
      <!-- 
        Currently the waitfor task allocates a port everytime it checks the admin server URL.
        If one of the server ports is allocated to the waitfor task we get a server startup error.
        Asadmin start-domain is a synchronous call but in the case of ant on windows the asadmin
        start-domain never returns to the ant exec task so it hangs forever.  For now we simply
        sleep for server.start.delay.mins minutes to give the app server more than enough time to come up.  This is
        a temparay fix until we implement something better.
      -->
      <sleep minutes="${server.start.delay.mins}"/> 
      <echo message=" HTTP server is now available at http://${glassfish.admin.host}:${glassfish.admin.port}" />
    </target>

    <!--
        Stop The App Server
    -->
    <target name="stop-server" depends="configPlatform">
      <exec executable="${exec.asadmin}" failifexecutionfails="false">
        <arg line="${exec.asadmin.part2}" />
        <arg line=" stop-domain"/>
        <arg line="  --kill=true"/>
      </exec>
    </target>

    <target name="copy.tck.jars">
        <copy file="${ts.home}/lib/jaxwstck.jar" tofile="${webcontainer.home}/domains/domain1/lib/ext/jaxwstck.jar" overwrite="yes" />
        <copy file="${ts.home}/lib/tsharness.jar" tofile="${webcontainer.home}/domains/domain1/lib/ext/tsharness.jar" overwrite="yes" />
    </target>

    <target name="delete.tck.jars">
       <delete file="${webcontainer.home}/domains/domain1/lib/ext/jaxwstck.jar" quiet="true"/>
       <delete file="${webcontainer.home}/domains/domain1/lib/ext/tsharness.jar" quiet="true"/>
    </target>

    <target name="add.users" depends="configPlatform">
	 <echo message="Create user: (j2ee,j2ee,staff:mgr:asadmin)"/>
         <antcall target="create-file-user" >
          <param name="userpassword" value="j2ee"/>
          <param name="usergroups" value="staff:mgr:asadmin"/>
          <param name="userName" value="j2ee"/>
         </antcall>
	 <echo message="Create user: (javajoe,javajoe,guest)"/>
         <antcall target="create-file-user" >
          <param name="userpassword" value="javajoe"/>
          <param name="usergroups" value="guest"/>
          <param name="userName" value="javajoe"/>
         </antcall>
    </target>

     <target name="create-file-user" depends="filter.password.file">
        <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" create-file-user"/>
            <arg line=" --groups ${usergroups}"/>
            <arg line=" ${userName}"/>
        </exec>
     </target>

    <target name="drop.users" depends="configPlatform">
	 <echo message="Delete user: j2ee"/>
         <antcall target="delete-file-user" >
          <param name="userName" value="j2ee"/>
         </antcall>
	 <echo message="Delete user: javajoe"/>
         <antcall target="delete-file-user" >
          <param name="userName" value="javajoe"/>
         </antcall>
     </target>

     <target name="delete-file-user" depends="filter.password.file">
        <exec executable="${exec.asadmin}" >
            <arg line="${exec.asadmin.part2}" />
            <arg line=" --user ${glassfish.admin.user}"/>
            <arg line=" --passwordfile ${password.file}"/>
            <arg line=" --host ${glassfish.admin.host}"/>
            <arg line=" --port ${glassfish.admin.port}"/>
            <arg line=" delete-file-user"/>
            <arg line=" ${userName}"/>
        </exec>
     </target>

</project>
